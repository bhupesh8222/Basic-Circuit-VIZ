\m4_TLV_version 1d: tl-x.org
\SV

   // =========================================
   // Welcome!  Try the tutorials via the menu.
   // =========================================

   // Default Makerchip TL-Verilog Code Template
   
   // Macro providing required top-level module definition, random
   // stimulus support, and Verilator config.
   m4_makerchip_module   // (Expanded in Nav-TLV pane.)
\TLV
   $reset = *reset;
   |pipe
      @0
         $cin = $in1 + $in2; //half adder
         \viz_alpha
            renderEach(){
               const WIDTH = 200
               const HEIGHT = 200
               debugger
               function CreateGroup(itemsToGroup, Left, Top){
                return new fabric.Group(itemsToGroup, {
                      left: Left,
                      top: Top
               })}
               let box = new fabric.Rect({
                   fill: "red",
                   width: WIDTH,
                   height: HEIGHT })
                   
               let text = new fabric.Text("1 bit\n Half Adder" , {
                     //left: 0,
                     //top:0,
                     fontSize: 25,
                     //textAlign: 'center'
                  });
                  
                  function makeLine(coords, myColor) {
                     return new fabric.Line(coords, {
                           stroke: myColor,
                           strokeWidth: 5,
                           evented: false,
                        });
                      }
               let input1 = makeLine([400,50,500,50],'$cin'.asBool() ? "green" : "red" )
               let input2 = makeLine([400,150,500,150], '$cin'.asBool() ? "green" : "red")
               let sum = makeLine([100,50,200,50], '$cin'.asBool() ? "green" : "red")
               let carry = makeLine([100,150,200,150], '$cin'.asBool() ? "green" : "red")
               let MyBox =  CreateGroup([box, text],200, 0)
              
               return {objects : [MyBox, input1, input2, sum, carry]}
            }
   //...

   // Assert these to end simulation (before Makerchip cycle limit).
   *passed = *cyc_cnt > 40;
   *failed = 1'b0;
\SV
   endmodule

