\m4_TLV_version 1d: tl-x.org
\SV

   // =========================================
   // Welcome!  Try the tutorials via the menu.
   // =========================================

   // Default Makerchip TL-Verilog Code Template
   
   // Macro providing required top-level module definition, random
   // stimulus support, and Verilator config.
   m4_makerchip_module   // (Expanded in Nav-TLV pane.)
\TLV
   $reset = *reset;
   |pipe
      @0
         \viz_alpha
            renderEach(){
               debugger
               const MUXInputs = 4 //enter the mux size
               const MUXname = MUXInputs.toString().concat(" X 1 MUX")
               let inputLines=[]
               let selectLine=[]
               let outputLine
               const MUXheight = 360
               const MUXwidth = 280 // 20 for gap
               const lineWidth = 200
               
               function CreateLine(position, myColor){
                return new fabric.Line(position, {
                 stroke: myColor,
                 strokeWidth: 5, 
                 evented: false,
               })}
               
               function CreateGroup(itemsToGroup, Left, Top){
                return new fabric.Group(itemsToGroup, {
                      left: Left,
                      top: Top
               })}
               
               function CreateInputs(inputs, height){
                 outputLine = CreateLine([lineWidth+MUXwidth, MUXheight / 2, 2 * lineWidth+MUXwidth, MUXheight/ 2],"blue")
                 let i = 1;
                 const gap = height/(inputs-1)
                 let position = 20
                 
                 //create inputs
                 for (i=1; i<=inputs; i=i+1){
                    inputLines.push(CreateLine([0, position, lineWidth, position], "green"))
                    position = position + gap
                 }
                 //createSelect line
                 if (inputs==2){
                   selectLine.push(CreateLine([lineWidth+MUXwidth/ 2, MUXheight, lineWidth+MUXwidth/ 2, MUXheight+lineWidth],"green"))
                 }
                 
                 else{
                  let selectlines = Math.log(MUXInputs) / Math.log(2)
                  let startingPoint = lineWidth + 20
                  let i = 1
                  const margin = (MUXwidth-40)/(selectlines-1)
                  //create selectLines
                  for (i=1; i<=selectlines; i=i+1){
                    selectLine.push(CreateLine([startingPoint, MUXheight, startingPoint, MUXheight+lineWidth], "green"))
                    startingPoint = startingPoint + margin
                 }}
                 
               }
               CreateInputs(MUXInputs,MUXheight-40)
               
               let box = new fabric.Rect({
                   fill: "red",
                   width: MUXwidth,
                   height: MUXheight })
                   
               let text = new fabric.Text(MUXname , {
                     left: 0,
                     top:0,
                     fontSize: 50,
                  });
                  
               let MyBox =  CreateGroup([box, text],200, 0)
               let FinalVizObject = [...inputLines, ...selectLine, outputLine , MyBox]
               return {objects : FinalVizObject }
            }
   //...

   // Assert these to end simulation (before Makerchip cycle limit).
   *passed = *cyc_cnt > 40;
   *failed = 1'b0;
\SV
   endmodule
